local utils = {}
local skynet = require("skynet")

local function ToStringEx(value)
    if type(value)=='table' then
        return utils.Table2String(value)
    elseif type(value)=='string' then
        return "\'"..value.."\'"
    else
        return tostring(value)
    end
end

function utils.Table2String(t)
    if t == nil then return "" end
    local retstr= "{"

    local i = 1
    for key,value in pairs(t) do
        local signal = ","
        if i==1 then
            signal = ""
        end

        if key == i then
            retstr = retstr..signal..ToStringEx(value)
        else
            if type(key)=='number' or type(key) == 'string' then
                retstr = retstr..signal..'['..ToStringEx(key).."]="..ToStringEx(value)
            else
                if type(key)=='userdata' then
                    retstr = retstr..signal.."*s"..utils.Table2String(getmetatable(key)).."*e".."="..ToStringEx(value)
                else
                    retstr = retstr..signal..key.."="..ToStringEx(value)
                end
            end
        end

        i = i+1
    end

    retstr = retstr.."}"
    return retstr
end

function utils.String2Table(s)
    if s == nil or type(s) ~= "string" then
        return
    end
    local ok, result = pcall(load("return " .. s))
    if ok then
        return result
    else
        return nil
    end
end

local lettermap = {
    "0", "1", "2", "3", "4", "5", "6", "7", "8", "9", "A", "B", "C", "D", "E", "F", "G",
    "H", "I", "J", "K", "L", "M", "N", "O", "P", "Q", "R", "S", "T", "U", "V", "W",
    "X", "Y", "Z", "a", "b", "c", "d", "e", "f", "g", "h", "i", "j", "k", "l", "m",
    "n", "o", "p", "q", "r", "s", "t", "u", "v", "w", "x", "y", "z"
}

function utils.randomString(len)
    if len > 0 then
        math.randomseed(tostring(os.time()):reverse():sub(1, 7))
        local str = {}
        for i = 1, len do
            local value = math.random(1, #lettermap)
            str[i] = lettermap[value]
        end
        return table.concat(str, "")
    end
end

function utils.cancelable_timeout(time, func)
    local function cb()
        if func then
            func()
        end
    end
    local function cancel()
        func = nil
    end
    skynet.timeout(time, cb)
    return cancel
end

function utils.timeout(time, func)
    skynet.timeout(time, func)
end

return utils