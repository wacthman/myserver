local skynet = require "skynet"
local socket = require "skynet.socket"
local snax = require("skynet.snax")
local sprotoloader = require "sprotoloader"
local login = require("login.login")

local agent = {}

function agent:close()
    self.loginservice.post.closeagent(self.fd)
end

function agent:getAccountInfo(account)
    return self.loginservice.req.db_selectaccount(account)
end

local function send_package(fd, pack)
    local package = string.pack(">s2", pack)
    socket.write(fd, package)
end

local function request(name, args, response)
    print("_request:", name, args, response)
    local f = assert(login.REQUEST[name])
    local r = f(args)
    if response then
        return response(r)
    end
end

local function response(session, args)
    local f = assert(login.RESPONSE[session])
    f(args)
end

local function dispatch(type, ...)
    if type == "REQUEST" then
        local ok, result  = pcall(request, ...)
        if ok then
            if result then
                send_package(agent.fd, result)
            end
        else
            skynet.error(result)
        end
    elseif type == "response" then
        local ok, result  = pcall(response, ...)
        if not ok then
            skynet.error(result)
        end
    end
end

function accept.disconnect()
    snax.exit()
end

function init(client, gate, snaxhanle, snaxtype, ...)
    skynet.register_protocol {
        name = "client",
        id = skynet.PTYPE_CLIENT,
        unpack = function (msg, sz)
            print("service unpack:", msg, sz)
            return agent.host:dispatch(msg, sz)
        end,
        dispatch = function (_, _, type, ...)
            print("service dispatch:", type, ...)
            dispatch(type, ...)
        end
    }

    agent.fd = client.fd
    agent.addr = client.addr
    agent.logingate = gate
    agent.loginservice = snax.bind(snaxhanle, snaxtype)
    agent.host = sprotoloader.load(1):host "package"
    agent.send_request = agent.host:attach(sprotoloader.load(2))

    --[[
    ---10秒没有握手就踢出
    handshaketimeout = utils.cancelable_timeout(1000, function ()
        loginservice.post.closeagent(fd)
    end)
    --]]
    login.join(agent)
    skynet.call(agent.logingate, "lua", "forward", agent.fd)
end

function exit(...)
    login.quit()
    agent = nil
end