local errorcode = require("common.errorcode")
local snax = require("skynet.snax")
local utils = require("login.loginutils")
local commonUtils = require("common.utils")
local commonDebug = require("common.debug")
local config = require("common.config")
local helper = require("helper")

local login = {}

function login.new(loginagent, rpc)
    local agent = {}

    function agent.hello(data)
        --检查db gate是否正常
        if not loginagent.db then
            return {result = errorcode("登录服数据库初始化失败")}
        end

        agent.randomstring = commonUtils.randomString(20)

        return {result = 0}
    end

    function agent.login(data)
        local type = data.type
        local account = data.account
        local password = data.password
        local extra = data.extra

        --检查数据库账号和密码
        local id
        if loginagent.db then
            local sql = string.format([[SELECT * FROM userinfo
            WHERE account='%s']], account)
            local res = loginagent.db.req.query(sql)
            if res and #res > 0 then
                if not res[1].account or
                        not res[1].password or
                        not res[1].id then
                    return {result = errorcode("登录服数据库数据错误")}
                end
                if res[1].account == account then
                    if res[1].password ~= password then
                        return {result = errorcode("密码错误")}
                    end
                    id = res[1].id
                else
                    return {result = errorcode("登录服数据库数据错误")}
                end
            else
                return {result = errorcode("无此账号")}
            end
        else
            return {result = errorcode("登录服数据库初始化失败")}
        end

        if not id then return {result = errorcode("无此账号id")} end

        local ok = loginagent.gateagent.req.loginsuccess()
        if ok then
            local token, info = utils.GetToken(loginagent.login, loginagent.registername,
                    account,  password,
                    loginagent.clientinfo and loginagent.clientinfo.ip or "",
                    agent.randomstring, id, agent.randomstring)

            if token then
                loginagent.timeout = commonUtils.cancelable_timeout(
                        config.TIME_OUT1,
                        function ()
                            loginagent.timeout = nil
                            snax.exit()
                        end)
                agent.tokeninfo = info
                return {
                    result = 0,
                    token = token }
            else
                return {result = errorcode("游戏服未准备就绪")}
            end
        else
            return {result = errorcode("游戏服未准备就绪")}
        end
    end

    function agent.logout(data)
        local code = utils.ClearToken(loginagent.login,
                loginagent.registername, agent.tokeninfo)
        agent.tokeninfo = nil
        return { result = code }
    end

    function agent.register(data)
        local account = data.account
        local password = data.password
        local extra = data.extra

        if loginagent.db then
            local sql = string.format([[SELECT * FROM userinfo
            WHERE account='%s']], account)
            local res = loginagent.db.req.query(sql)

            if res then
                if #res <= 0 then
                    sql = string.format([[INSERT INTO userinfo(account,password) VALUES ("%s", "%s")]],
                            account, password)
                    res = loginagent.db.req.query(sql)
                    if not res or res.error then
                        return {result = errorcode("登录服数据库请求失败")}
                    end
                else
                    return {result = errorcode("账号已经存在")}
                end
            else
                return {result = errorcode("登录服数据库数据错误")}
            end
        else
            return {result = errorcode("登录服数据库初始化失败")}
        end

        return { result = 0 }
    end

    function agent.checkToken(token)
        local code, info = utils.VerificationToken(loginagent.login, token,
                agent.tokeninfo,
                loginagent.clientinfo and loginagent.clientinfo.ip or "")
        if code == 0 then
            return code, info.id
        else
            agent.tokeninfo = nil
            return code
        end
    end

    return agent
end

return login